name: 🚀 Build & Deploy workflow on production environment

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

      - name: 📀 Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: ✨ Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up environment variables
        run:
          export JWT_SECRET=${{ secrets.JWT_SECRET }}
          export JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }}
          export JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}
          export JWT_ACCESS_HEADER=${{ secrets.JWT_ACCESS_HEADER }}
          export JWT_REFRESH_HEADER=${{ secrets.JWT_REFRESH_HEADER }}
          export GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          export GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          export NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
          export NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
          export KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          export KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}

      - name: 🔨 Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build

  deploy:
    if: github.event.pull_request.merged == true
    env:
      ENV_PATH: .env
      DEPLOYMENT_GROUP_NAME: production
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

      - name: 🗂️ Make config folder
        run: mkdir -p config

      - name: ⚙️ Create .env file
        run: |
          touch ${{ env.ENV_PATH }}
          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> ${{ env.ENV_PATH }}
          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> ${{ env.ENV_PATH }}
          echo NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} >> ${{ env.ENV_PATH }}
          echo NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} >> ${{ env.ENV_PATH }}
          echo KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} >> ${{ env.ENV_PATH }}
          echo KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} >> ${{ env.ENV_PATH }}
          echo JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} >> ${{ env.ENV_PATH }}
          echo JWT_REFRESH_HEADER=${{ secrets.JWT_REFRESH_HEADER }} >> ${{ env.ENV_PATH }}
          echo JWT_ACCESS_HEADER=${{ secrets.JWT_ACCESS_HEADER }} >> ${{ env.ENV_PATH }}
          echo JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} >> ${{ env.ENV_PATH }}
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> ${{ env.ENV_PATH }}

      - name: 📦 Zip project files
        run: zip -r ./$GITHUB_SHA.zip .

      - name: 🌎 Access to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 🚛 Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/${{ env.S3_BUCKET_DIR_NAME }}/$GITHUB_SHA.zip

      - name: 🚀 Deploy to EC2 with CodeDeploy
        run: aws deploy create-deployment
          --application-name us-server-deploy-application
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=${{ env.S3_BUCKET_DIR_NAME }}/$GITHUB_SHA.zip