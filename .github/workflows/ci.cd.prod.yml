# GitHub Action 설정
name: 🚀 Build & Deploy workflow on production environment

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      ENV_PATH: ./src/main/resources
      ENV_DB: application-db.yml
      ENV_AUTH: application-auth.yml
      DOCKER_IMAGE_NAME: us-server
      DOCKER_IMAGE_TAG: deploy
    steps:
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

      - name: 📀 Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: 💽 Make application-db.yml
        run: |
          cd ${{ env.ENV_PATH }}
          touch ${{ env.ENV_DB }}
          echo "${{ secrets.SPRING_DB_CONFIG }}" >> ${{ env.ENV_DB }}
        shell: bash

      - name: 🔑 Make application-auth.yml
        run: |
          cd ${{ env.ENV_PATH }}
          touch ${{ env.ENV_AUTH }}
          echo "${{ secrets.SPRING_AUTH_CONFIG }}" > ${{ env.ENV_AUTH }}
        shell: bash

      - name: ✨ Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 🔨 Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build -x test
          gradle-version: 8.3

      - name: 🐳 Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME}}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} .

      - name: 🌎 Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: 🐋 Push a Docker Image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

  deploy:
    needs: build
    runs-on: self-hosted
    env:
      DOCKER_IMAGE_NAME: us-server
      DOCKER_IMAGE_TAG: deploy
    steps:
      - name: Pull Latest Image
        run: |
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Stop Current Running Container
        run: |
          sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      - name: Run Latest Image
        run: |
          sudo docker run --name api-server --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Delete Old Image
        run: |
          sudo docker system prune -f

        #      - name: 🌎 Access to AWSss
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: 🚛 Upload to S3
#        run: |
#          aws deploy push \
#            --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
#            --ignore-hidden-files \
#            --s3-location s3://${{secrets.S3_BUCKET_NAME}}/deploy \
#            --source .
#
#      - name: 🚀 Deploy to EC2 with CodeDeploy
#        run: |
#          aws deploy create-deployment \
#            --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
#            --deployment-config-name CodeDeployDefault.AllAtOnce \
#            --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \
#            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=us-server.zip
#



## GitHub Action 설정
#name: 🚀 Build & Deploy workflow on production environment
#
#on:
#  pull_request:
#    branches: [main]
#    types: [closed]
#
#jobs:
#  build:
#    if: github.event.pull_request.merged == true
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: ✅ Checkout branch
#        uses: actions/checkout@v3
#
#      - name: 📀 Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'corretto'
#
#      - name: 💽 Make application-db.yml
#        run: |
#          cd ./src/main/resources
#          touch ./application-db.yml
#          echo "${{ secrets.SPRING_DB_CONFIG }}" >> ./application-db.yml
#        shell: bash
#
#      - name: 🔑 Make application-auth.yml
#        run: |
#          cd ./src/main/resources
#          touch ./application-auth.yml
#          echo "${{ secrets.SPRING_AUTH_CONFIG }}" > ./application-auth.yml
#        shell: bash
#
#      - name: ✨ Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: 🔨 Build with Gradle
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: clean build -x test
#          gradle-version: 8.3
#
#      - name: 배포를 위한 파일만 담을 디렉토리 생성
#        run: |
#          mkdir -p before-deploy
#
#      - name: 배포용 스크립트, jar 파일 복사
#        run: |
#          cp scripts/*.sh before-deploy/
#          cp appspec.yml before-deploy/
#          cp build/libs/*.jar before-deploy/
#
#      - name: 배포용 파일 전체 압축
#        run: |
#          cd before-deploy
#          zip -r before-deploy
#
#      - name: deploy 폴더로 zip 파일 이동
#        run: |
#          cd ../ & mkdir -p deploy
#          mv before-deploy/before-deploy.zip deploy/us-server.zip
#
#  deploy:
#    needs: build
#    if: github.event.pull_request.merged == true
#    env:
#      ENV_PATH: ./src/main/resources
#      ENV_DB: application-db.yml
#      ENV_AUTH: application-auth.yml
#      CODE_DEPLOY_APPLICATION_NAME: us-server
#      CODE_DEPLOY_GROUP_NAME: us-server-deploy
#    runs-on: ubuntu-latest
#    steps:
#      - name: ✅ Checkout branch
#        uses: actions/checkout@v3
#
#      - name: ⚙️ Create application-*.yml files
#        run: |
#          touch ${{ env.ENV_PATH }}/${{ env.ENV_DB }}
#          touch ${{ env.ENV_PATH }}/${{ env.ENV_AUTH }}
#          echo "${{ secrets.SPRING_DB_CONFIG }}" >> ${{ env.ENV_PATH }}/${{ env.ENV_DB }}
#          echo "${{ secrets.SPRING_AUTH_CONFIG }}" >> ${{ env.ENV_PATH }}/${{ env.ENV_AUTH }}
#
#      - name: 📦 Zip project files
#        run: zip -r ./$GITHUB_SHA.zip .
#
#      - name: 🌎 Access to AWS
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: 🚛 Upload to S3
#        run: |
#          aws deploy push \
#            --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
#            --ignore-hidden-files \
#            --s3-location s3://${{secrets.S3_BUCKET_NAME}}/$GITHUB_SHA.zip \
#            --source .
#
#      - name: 🚀 Deploy to EC2 with CodeDeploy
#        run: |
#          aws deploy create-deployment \
#            --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}} \
#            --deployment-config-name CodeDeployDefault.AllAtOnce \
#            --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }} \
#            --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip
