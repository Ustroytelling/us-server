# GitHub Action 설정
name: 🚀 Build & Deploy workflow on production environment

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

      - name: 📀 Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: 💽 Make application-db.yml
        run: |
          cd ./src/main/resources
          touch ./application-db.yml
          echo "${{ secrets.SPRING_DB_CONFIG }}" >> ./application-db.yml
        shell: bash

      - name: 🔑 Make application-auth.yml
        run: |
          cd ./src/main/resources
          touch ./application-auth.yml
          echo "${{ secrets.SPRING_AUTH_CONFIG }}" > ./application-auth.yml
        shell: bash

      - name: ✨ Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: 🔨 Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean build -x test
          gradle-version: 8.3


      - name: 🗂️ Create a directory for distribution
        run: |
          mkdir -p before-deploy

      - name: 💿 Copy deploy scripts and jar file
        run: |
          cp scripts/*.sh before-deploy/
          cp appspec.yml before-deploy/
          cp build/libs/*.jar before-deploy/

      - name: 💿 Compressing all distribution files
        run: |
          cd before-deploy
          zip -r before-deploy

      - name: 🚚 Move the zip file to the deploy folder
        run: |
          cd ../ & mkdir -p deploy
          mv before-deploy/before-deploy.zip deploy/us-server.zip

  deploy:
    needs: before-deploy
    if: github.event.pull_request.merged == true
    env:
      DEPLOY_DIR: deploy
      DEPLOY_ZIP: us-server.zip
      CODE_DEPLOY_APPLICATION_NAME: us-server
      CODE_DEPLOY_GROUP_NAME: us-server-deploy
#    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: ✅ Checkout branch
        uses: actions/checkout@v3

#      - name: 🗂️ Make config folder
#        run: mkdir -p config
#
#      - name: ⚙️ Create .env file
#        run: |
#          touch ${{ env.ENV_PATH }}
#          echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> ${{ env.ENV_PATH }}
#          echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> ${{ env.ENV_PATH }}
#          echo NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} >> ${{ env.ENV_PATH }}
#          echo NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} >> ${{ env.ENV_PATH }}
#          echo KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} >> ${{ env.ENV_PATH }}
#          echo KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} >> ${{ env.ENV_PATH }}
#          echo JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} >> ${{ env.ENV_PATH }}
#          echo JWT_REFRESH_HEADER=${{ secrets.JWT_REFRESH_HEADER }} >> ${{ env.ENV_PATH }}
#          echo JWT_ACCESS_HEADER=${{ secrets.JWT_ACCESS_HEADER }} >> ${{ env.ENV_PATH }}
#          echo JWT_ACCESS_EXPIRATION=${{ secrets.JWT_ACCESS_EXPIRATION }} >> ${{ env.ENV_PATH }}
#          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> ${{ env.ENV_PATH }}
#
#      - name: 📦 Zip project files
#        run: zip -r ./$GITHUB_SHA.zip .

      - name: 🌎 Access to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: 🚛 Upload to S3
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$GITHUB_SHA.zip
        run: |
          aws deploy push \
            --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}}
            --s3-location s3: // ${{secrets.S3_BUCKET_NAME}}/${{ env.DEPLOY_DIR }}
            --ignore-hidden-files
            --source .

      - name: 🚀 Deploy to EC2 with CodeDeploy
        run: aws deploy create-deployment
          --application-name ${{env.CODE_DEPLOY_APPLICATION_NAME}}
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name ${{ env.CODE_DEPLOY_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=${{ env.DEPLOY_ZIP }}
